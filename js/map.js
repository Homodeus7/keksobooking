// В этом задании мы добавим в проект интерактивную карту и начнём реализацию сценария переключения режимов страницы между неактивным и активным, который завязан на карте.
// Удалите код отрисовки одного из сгенерированных DOM-элементов объявления, который был нужен только для разработки.
// Реализуйте с помощью JavaScript перевод страницы в неактивное состояние, все пункты, кроме первого про карту.
// Важно. Неактивность должна добавляться именно средствами JavaScript, иначе, если классы и атрибуты добавить напрямую в HTML, при ошибке в скриптах или ошибке загрузки скриптов сайт будет недоступен пользователю.
// С помощью полученных обновлений (стили, изображения и скрипты необходимые для Leaflet) от Кексобота реализуйте отображение карты и дальнейший переход страницы в активное состояние. Координаты центра Токио найдите самостоятельно.
// Обратите внимание, это нужно делать с помощью API, предоставляемого картами, а не браузером.
// Напишите код, который будет добавлять на карту специальную, «главную», метку. Иконка для метки есть в обновлении, файл main-pin.svg.
// Реализуйте с помощью API карт выбор адреса путём перемещения главной метки. Ручное редактирование поля запрещено, однако поле должно быть доступно, чтобы значение отправлялось на сервер с формой.
// Напишите код, который добавит на карту метки объявлений, «обычные». Иконка для меток есть в обновлении, файл pin.svg. Для отображения используйте данные для разработки, которые мы генерировали несколько заданий назад.
// С помощью API карт реализуйте показ балуна с подробной информацией об объявлении. Учтите нюансы поведения и ограничения для обычных меток и главной.

// Задача: разобраться как подтягивать данные из массива для отрисовки "обычных" объявлений!
// понять куда выводить координаты

import { autors, offers } from './data.js'

console.log(offers)

const map = L.map('map-canvas')
    .on('load', () => {
        console.log('Карта инициализирована')
    })
    .setView({
        lat: 35.65631,
        lng: 139.78042,
    }, 12);

L.tileLayer(
    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    },
).addTo(map);

// Реализуйте с помощью API карт выбор адреса путём перемещения главной метки. Ручное редактирование поля запрещено, однако поле должно быть доступно, чтобы значение отправлялось на сервер с формой.

const mainPinIcon = L.icon({
    iconUrl: '/leaflet/img/main-pin.svg',
    iconSize: [52, 52],
    iconAnchor: [26, 52],
});

const mainPinMarker = L.marker(
    {
        lat: 35.65631,
        lng: 139.78042,
    },
    {
        draggable: true,
        icon: mainPinIcon,
    },
);

mainPinMarker.addTo(map);

//О бработчик события moveend означает,что пользователь закончил передвигать маркер, и выведем в консоль новые координаты метки.
// Обратите внимание, что как и у обычного события, у события карты есть target, только методы у объекта события свои, нужные для карты. 
// Метод getLatLng() возвращает объект с новыми координатами.

mainPinMarker.on('moveend', (evt) => {
    console.log(evt.target.getLatLng());
});

// Содержимым балуна должен быть наш HTML, а не просто текст
// функция createCustomPopup по получению DOM-элемента из разметки


const createCustomPopup = (point) => {
    const cardTemplate = document.querySelector('#card').content.querySelector('.popup');
    const popupElement = cardTemplate.cloneNode(true);

    popupElement.querySelector('.popup__title').textContent = point.title;
    popupElement.querySelector('.popup__text--price').textContent = point.price;
    popupElement.querySelector('.popup__description').textContent = point.lat, point.lng;

    return popupElement;
};

// А дальше в проходке forEach по циклу насоздаём маркеров и понадобавляем их на карту.

offers.forEach((point) => {
    const { lat, lng } = point;

    const icon = L.icon({
        iconUrl: '/leaflet/img/pin.svg',
        iconSize: [40, 40],
        iconAnchor: [20, 40],
    });

    const marker = L.marker(
        {
            lat,
            lng,
        },
        {
            icon,
        },
    );

    //keepInView, чтобы карта автоматичски переместилась, если балун вылезает за границы. Кликните по самой верхей метке, чтобы увидеть это в действии.

    marker
        .addTo(map)
        .bindPopup(
            createCustomPopup(point),
            {
                keepInView: true,
            },
        );
});